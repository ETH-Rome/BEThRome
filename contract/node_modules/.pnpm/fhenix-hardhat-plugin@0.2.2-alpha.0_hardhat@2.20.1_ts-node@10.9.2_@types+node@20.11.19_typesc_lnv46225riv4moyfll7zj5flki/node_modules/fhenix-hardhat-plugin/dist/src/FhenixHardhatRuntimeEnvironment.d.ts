import { EncryptedBool, EncryptedUint128, EncryptedUint16, EncryptedUint256, EncryptedUint32, EncryptedUint64, EncryptedUint8, FhenixClient, SupportedProvider } from "fhenixjs";
import { HardhatRuntimeEnvironment } from "hardhat/types";
interface FhenixHardhatRuntimeEnvironmentConfig {
    rpcPort: number;
    wsPort: number;
    faucetPort: number;
}
export declare class FhenixHardhatRuntimeEnvironment extends FhenixClient {
    hre: HardhatRuntimeEnvironment;
    config: FhenixHardhatRuntimeEnvironmentConfig;
    network: string;
    constructor(hre: HardhatRuntimeEnvironment, config: FhenixHardhatRuntimeEnvironmentConfig);
    encrypt_uint8(value: number): Promise<EncryptedUint8>;
    encrypt_uint16(value: number): Promise<EncryptedUint16>;
    encrypt_uint32(value: number): Promise<EncryptedUint32>;
    encrypt_uint64(value: string | bigint): Promise<EncryptedUint64>;
    encrypt_uint128(value: string | bigint): Promise<EncryptedUint128>;
    encrypt_uint256(value: string | bigint): Promise<EncryptedUint256>;
    encrypt_bool(value: boolean): Promise<EncryptedBool>;
    unseal(contractAddress: string, ciphertext: string): bigint;
    getFunds(address: string): Promise<void>;
    createPermit(contractAddress: string, provider?: SupportedProvider): Promise<import("fhenixjs").Permit | undefined>;
    sayHello(): string;
}
export declare class MockProvider {
    send(method: string, params: any[] | Record<string, any>): Promise<any>;
    getSigner(): Promise<any>;
}
export {};
//# sourceMappingURL=FhenixHardhatRuntimeEnvironment.d.ts.map