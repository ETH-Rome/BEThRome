"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MockProvider = exports.FhenixHardhatRuntimeEnvironment = void 0;
const fhenixjs_1 = require("fhenixjs");
const common_1 = require("./common");
class FhenixHardhatRuntimeEnvironment extends fhenixjs_1.FhenixClient {
    constructor(hre, config) {
        let superArgs = {
            ignoreErrors: true,
            provider: new MockProvider(),
        };
        if (hre?.network !== undefined && hre.network.provider) {
            superArgs = {
                ignoreErrors: true,
                provider: hre.network.provider,
            };
        }
        super(superArgs);
        this.hre = hre;
        this.config = config;
        this.network = hre?.network?.name;
        console.log(`network: ${JSON.stringify(this.network)}`);
        if (hre?.network?.name === "hardhat") {
            return;
        }
    }
    async encrypt_uint8(value) {
        if (this.network === "hardhat") {
            const data = bigintToUint8Array(BigInt(value));
            return {
                data,
            };
        }
        else {
            return super.encrypt_uint8(value);
        }
    }
    async encrypt_uint16(value) {
        if (this.network === "hardhat") {
            const data = bigintToUint8Array(BigInt(value));
            return {
                data,
            };
        }
        else {
            return super.encrypt_uint16(value);
        }
    }
    async encrypt_uint32(value) {
        if (this.network === "hardhat") {
            const data = bigintToUint8Array(BigInt(value));
            return {
                data,
            };
        }
        else {
            return super.encrypt_uint32(value);
        }
    }
    async encrypt_uint64(value) {
        if (this.network === "hardhat") {
            const data = bigintToUint8Array(BigInt(value));
            return {
                data,
            };
        }
        else {
            return super.encrypt_uint64(value);
        }
    }
    async encrypt_uint128(value) {
        if (this.network === "hardhat") {
            const data = bigintToUint8Array(BigInt(value));
            return {
                data,
            };
        }
        else {
            return super.encrypt_uint128(value);
        }
    }
    async encrypt_uint256(value) {
        if (this.network === "hardhat") {
            const data = bigintToUint8Array(BigInt(value));
            return {
                data,
            };
        }
        else {
            return super.encrypt_uint256(value);
        }
    }
    async encrypt_bool(value) {
        if (this.network === "hardhat") {
            if (value) {
                const data = bigintToUint8Array(BigInt(1));
                return {
                    data,
                };
            }
            else {
                const data = bigintToUint8Array(BigInt(0));
                return {
                    data,
                };
            }
        }
        else {
            return super.encrypt_bool(value);
        }
    }
    unseal(contractAddress, ciphertext) {
        // console.log(`ct: ${ciphertext}`);
        if (this.network === "hardhat") {
            return BigInt(ciphertext);
        }
        else {
            return super.unseal(contractAddress, ciphertext);
        }
    }
    async getFunds(address) {
        await (0, common_1.getFunds)(address, `http://localhost:${this.config.faucetPort}`);
    }
    async createPermit(contractAddress, provider) {
        if (!provider && this.provider === undefined) {
            throw new Error("no provider provided");
        }
        const permit = await (0, fhenixjs_1.getPermit)(contractAddress, provider || this.provider);
        if (!permit) {
            return;
        }
        this.storePermit(permit);
        return permit;
    }
    sayHello() {
        return "hello";
    }
}
exports.FhenixHardhatRuntimeEnvironment = FhenixHardhatRuntimeEnvironment;
class MockProvider {
    async send(method, params) {
        return new Promise((resolve, reject) => {
            reject("provider not initialized");
        });
    }
    async getSigner() {
        return new Promise((resolve, reject) => {
            reject("provider not initialized");
        });
    }
}
exports.MockProvider = MockProvider;
//
// function bigintToUint8Array(value: bigint): Uint8Array {
//   const hex = value.toString(16);
//   const len = Math.ceil(hex.length / 2);
//   const u8 = new Uint8Array(len);
//   for (let i = 0; i < len; i++) {
//     u8[len - i - 1] = parseInt(hex.substr(i * 2, 2), 16);
//   }
//   return u8;
// }
function bigintToUint8Array(bigNum) {
    const byteLength = 32;
    const byteArray = new Uint8Array(byteLength);
    // Create a BigInt mask for each byte
    const mask = BigInt(0xff);
    // Initialize an index to start from the end of the array
    for (let i = 0; i < byteLength; i++) {
        // Extract the last byte and assign it to the corresponding position in the array
        byteArray[byteLength - 1 - i] = Number(bigNum & mask);
        // Shift bigint right by 8 bits to process the next byte in the next iteration
        bigNum >>= BigInt(8);
    }
    return byteArray;
}
//# sourceMappingURL=FhenixHardhatRuntimeEnvironment.js.map